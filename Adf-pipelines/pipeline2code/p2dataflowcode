{
    "name": "df_p_to_s",
    "properties": {
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "dataset": {
                        "referenceName": "ds_preprocess_parquet",
                        "type": "DatasetReference"
                    },
                    "name": "source1"
                }
            ],
            "sinks": [
                {
                    "dataset": {
                        "referenceName": "ds_dim_beneficiary",
                        "type": "DatasetReference"
                    },
                    "name": "sinkbeneficiary",
                    "rejectedDataLinkedService": {
                        "referenceName": "ls_sink_adls",
                        "type": "LinkedServiceReference"
                    }
                },
                {
                    "dataset": {
                        "referenceName": "ds_dim_provider",
                        "type": "DatasetReference"
                    },
                    "name": "sinkprovider",
                    "rejectedDataLinkedService": {
                        "referenceName": "ls_sink_adls",
                        "type": "LinkedServiceReference"
                    }
                },
                {
                    "dataset": {
                        "referenceName": "ds_fact_claim",
                        "type": "DatasetReference"
                    },
                    "name": "sinkfactclaim",
                    "rejectedDataLinkedService": {
                        "referenceName": "ls_sink_adls",
                        "type": "LinkedServiceReference"
                    }
                }
            ],
            "transformations": [
                {
                    "name": "selectdimProvider"
                },
                {
                    "name": "selectdimBeneficiary"
                },
                {
                    "name": "aggregateBeneficiary"
                },
                {
                    "name": "surrogateKeyBeneficiary"
                },
                {
                    "name": "aggregateProvider"
                },
                {
                    "name": "surrogateKeyProvider"
                },
                {
                    "name": "joinBeneficiary"
                },
                {
                    "name": "joinProvider"
                },
                {
                    "name": "select7"
                },
                {
                    "name": "select8"
                },
                {
                    "name": "select9"
                }
            ],
            "scriptLines": [
                "source(output(",
                "          DESYNPUF_ID as string,",
                "          BENE_BIRTH_DT as string,",
                "          BENE_DEATH_DT as string,",
                "          BENE_SEX_IDENT_CD as string,",
                "          BENE_RACE_CD as string,",
                "          BENE_ESRD_IND as string,",
                "          SP_STATE_CODE as string,",
                "          BENE_COUNTY_CD as string,",
                "          BENE_HI_CVRAGE_TOT_MONS as string,",
                "          BENE_SMI_CVRAGE_TOT_MONS as string,",
                "          BENE_HMO_CVRAGE_TOT_MONS as string,",
                "          PLAN_CVRG_MOS_NUM as string,",
                "          SP_ALZHDMTA as string,",
                "          SP_CHF as string,",
                "          SP_CHRNKIDN as string,",
                "          SP_CNCR as string,",
                "          SP_COPD as string,",
                "          SP_DEPRESSN as string,",
                "          SP_DIABETES as string,",
                "          SP_ISCHMCHT as string,",
                "          SP_OSTEOPRS as string,",
                "          SP_RA_OA as string,",
                "          SP_STRKETIA as string,",
                "          MEDREIMB_IP as string,",
                "          BENRES_IP as string,",
                "          PPPYMT_IP as string,",
                "          MEDREIMB_OP as string,",
                "          BENRES_OP as string,",
                "          PPPYMT_OP as string,",
                "          MEDREIMB_CAR as string,",
                "          BENRES_CAR as string,",
                "          PPPYMT_CAR as string,",
                "          CLM_ID as string,",
                "          CLM_FROM_DT as string,",
                "          CLM_THRU_DT as string,",
                "          ICD9_DGNS_CD_1 as string,",
                "          PRF_PHYSN_NPI_1 as string,",
                "          HCPCS_CD_1 as string,",
                "          LINE_NCH_PMT_AMT_1 as string,",
                "          LINE_BENE_PTB_DDCTBL_AMT_1 as string,",
                "          LINE_COINSRNC_AMT_1 as string,",
                "          LINE_PRCSG_IND_CD_1 as string,",
                "          LINE_ICD9_DGNS_CD_1 as string,",
                "          md5_hash as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false,",
                "     format: 'parquet') ~> source1",
                "source1 select(mapColumn(",
                "          PRF_PHYSN_NPI_1,",
                "          HCPCS_CD_1",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> selectdimProvider",
                "source1 select(mapColumn(",
                "          DESYNPUF_ID,",
                "          BENE_BIRTH_DT,",
                "          BENE_DEATH_DT,",
                "          BENE_SEX_IDENT_CD,",
                "          BENE_RACE_CD,",
                "          BENE_ESRD_IND,",
                "          SP_STATE_CODE,",
                "          BENE_COUNTY_CD,",
                "          BENE_HI_CVRAGE_TOT_MONS,",
                "          BENE_SMI_CVRAGE_TOT_MONS,",
                "          BENE_HMO_CVRAGE_TOT_MONS,",
                "          PLAN_CVRG_MOS_NUM,",
                "          SP_ALZHDMTA,",
                "          SP_CHF,",
                "          SP_CHRNKIDN,",
                "          SP_CNCR,",
                "          SP_COPD,",
                "          SP_DEPRESSN,",
                "          SP_DIABETES,",
                "          SP_ISCHMCHT,",
                "          SP_OSTEOPRS,",
                "          SP_RA_OA,",
                "          SP_STRKETIA",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> selectdimBeneficiary",
                "selectdimBeneficiary aggregate(groupBy(DESYNPUF_ID,",
                "          BENE_BIRTH_DT,",
                "          BENE_DEATH_DT,",
                "          BENE_SEX_IDENT_CD,",
                "          BENE_RACE_CD,",
                "          BENE_ESRD_IND,",
                "          SP_STATE_CODE,",
                "          BENE_COUNTY_CD,",
                "          BENE_HI_CVRAGE_TOT_MONS,",
                "          BENE_SMI_CVRAGE_TOT_MONS,",
                "          BENE_HMO_CVRAGE_TOT_MONS,",
                "          PLAN_CVRG_MOS_NUM,",
                "          SP_ALZHDMTA,",
                "          SP_CHF,",
                "          SP_CHRNKIDN,",
                "          SP_CNCR,",
                "          SP_COPD,",
                "          SP_DEPRESSN,",
                "          SP_DIABETES,",
                "          SP_ISCHMCHT,",
                "          SP_OSTEOPRS,",
                "          SP_RA_OA,",
                "          SP_STRKETIA),",
                "     dum_key = first(true())) ~> aggregateBeneficiary",
                "aggregateBeneficiary keyGenerate(output(beneficiary_sk as long),",
                "     startAt: 1L,",
                "     stepValue: 1L) ~> surrogateKeyBeneficiary",
                "selectdimProvider aggregate(groupBy(PRF_PHYSN_NPI_1,",
                "          HCPCS_CD_1),",
                "     dum_1 = first(true())) ~> aggregateProvider",
                "aggregateProvider keyGenerate(output(provider_sk as long),",
                "     startAt: 1L,",
                "     stepValue: 1L) ~> surrogateKeyProvider",
                "source1, select7 join(source1@DESYNPUF_ID == select7@DESYNPUF_ID",
                "     && source1@BENE_BIRTH_DT == select7@BENE_BIRTH_DT",
                "     && source1@BENE_DEATH_DT == select7@BENE_DEATH_DT",
                "     && source1@BENE_SEX_IDENT_CD == select7@BENE_SEX_IDENT_CD",
                "     && source1@BENE_RACE_CD == select7@BENE_RACE_CD",
                "     && source1@BENE_ESRD_IND == select7@BENE_ESRD_IND",
                "     && source1@SP_STATE_CODE == select7@SP_STATE_CODE",
                "     && source1@BENE_COUNTY_CD == select7@BENE_COUNTY_CD",
                "     && source1@BENE_HI_CVRAGE_TOT_MONS == select7@BENE_HI_CVRAGE_TOT_MONS",
                "     && source1@BENE_SMI_CVRAGE_TOT_MONS == select7@BENE_SMI_CVRAGE_TOT_MONS",
                "     && source1@BENE_HMO_CVRAGE_TOT_MONS == select7@BENE_HMO_CVRAGE_TOT_MONS",
                "     && source1@PLAN_CVRG_MOS_NUM == select7@PLAN_CVRG_MOS_NUM",
                "     && source1@SP_ALZHDMTA == select7@SP_ALZHDMTA",
                "     && source1@SP_CHF == select7@SP_CHF",
                "     && source1@SP_CHRNKIDN == select7@SP_CHRNKIDN",
                "     && source1@SP_CNCR == select7@SP_CNCR",
                "     && source1@SP_COPD == select7@SP_COPD",
                "     && source1@SP_DEPRESSN == select7@SP_DEPRESSN",
                "     && source1@SP_DIABETES == select7@SP_DIABETES",
                "     && source1@SP_ISCHMCHT == select7@SP_ISCHMCHT",
                "     && source1@SP_OSTEOPRS == select7@SP_OSTEOPRS",
                "     && source1@SP_RA_OA == select7@SP_RA_OA,",
                "     joinType:'inner',",
                "     matchType:'exact',",
                "     ignoreSpaces: false,",
                "     broadcast: 'auto')~> joinBeneficiary",
                "joinBeneficiary, select8 join(source1@PRF_PHYSN_NPI_1 == select8@PRF_PHYSN_NPI_1",
                "     && source1@HCPCS_CD_1 == select8@HCPCS_CD_1,",
                "     joinType:'inner',",
                "     matchType:'exact',",
                "     ignoreSpaces: false,",
                "     broadcast: 'auto')~> joinProvider",
                "surrogateKeyBeneficiary select(mapColumn(",
                "          DESYNPUF_ID,",
                "          BENE_BIRTH_DT,",
                "          BENE_DEATH_DT,",
                "          BENE_SEX_IDENT_CD,",
                "          BENE_RACE_CD,",
                "          BENE_ESRD_IND,",
                "          SP_STATE_CODE,",
                "          BENE_COUNTY_CD,",
                "          BENE_HI_CVRAGE_TOT_MONS,",
                "          BENE_SMI_CVRAGE_TOT_MONS,",
                "          BENE_HMO_CVRAGE_TOT_MONS,",
                "          PLAN_CVRG_MOS_NUM,",
                "          SP_ALZHDMTA,",
                "          SP_CHF,",
                "          SP_CHRNKIDN,",
                "          SP_CNCR,",
                "          SP_COPD,",
                "          SP_DEPRESSN,",
                "          SP_DIABETES,",
                "          SP_ISCHMCHT,",
                "          SP_OSTEOPRS,",
                "          SP_RA_OA,",
                "          SP_STRKETIA,",
                "          beneficiary_sk",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> select7",
                "surrogateKeyProvider select(mapColumn(",
                "          PRF_PHYSN_NPI_1,",
                "          HCPCS_CD_1,",
                "          provider_sk",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> select8",
                "joinProvider select(mapColumn(",
                "          beneficiary_sk,",
                "          DESYNPUF_ID = source1@DESYNPUF_ID,",
                "          PRF_PHYSN_NPI_1 = source1@PRF_PHYSN_NPI_1,",
                "          provider_sk,",
                "          MEDREIMB_IP,",
                "          BENRES_IP,",
                "          PPPYMT_IP,",
                "          PPPYMT_IP = MEDREIMB_OP,",
                "          BENRES_OP,",
                "          PPPYMT_OP,",
                "          MEDREIMB_CAR,",
                "          BENRES_CAR,",
                "          PPPYMT_CAR,",
                "          CLM_ID,",
                "          CLM_FROM_DT,",
                "          CLM_THRU_DT,",
                "          ICD9_DGNS_CD_1,",
                "          LINE_NCH_PMT_AMT_1,",
                "          LINE_BENE_PTB_DDCTBL_AMT_1,",
                "          LINE_COINSRNC_AMT_1,",
                "          LINE_PRCSG_IND_CD_1,",
                "          LINE_ICD9_DGNS_CD_1,",
                "          md5_hash",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> select9",
                "select7 sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     partitionFileNames:['dim_beneficiary.csv'],",
                "     umask: 0022,",
                "     preCommands: [],",
                "     postCommands: [],",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     partitionBy('hash', 1)) ~> sinkbeneficiary",
                "select8 sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     partitionFileNames:['dim_provider.csv'],",
                "     umask: 0022,",
                "     preCommands: [],",
                "     postCommands: [],",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     partitionBy('hash', 1)) ~> sinkprovider",
                "select9 sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     partitionFileNames:['fact_claim.csv'],",
                "     umask: 0022,",
                "     preCommands: [],",
                "     postCommands: [],",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     partitionBy('hash', 1)) ~> sinkfactclaim"
            ]
        }
    }
}
